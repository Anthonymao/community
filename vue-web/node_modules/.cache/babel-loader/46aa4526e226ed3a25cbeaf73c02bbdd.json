{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n\n  privateMap.set(obj, value);\n}\n\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n\nfunction _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\");\n\n  return _classApplyDescriptorGet(receiver, descriptor);\n}\n\nfunction _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n\n  return descriptor.value;\n}\n\nfunction _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\");\n\n  _classApplyDescriptorSet(receiver, descriptor, value);\n\n  return value;\n}\n\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n\n  return privateMap.get(receiver);\n}\n\nfunction _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n\n    descriptor.value = value;\n  }\n}\n\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\nvar _rootNodes = /*#__PURE__*/new WeakMap();\n\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\n\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\n\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n\n\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n\n      return node;\n    }\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n\n      if (!rootNode) {\n        return;\n      } // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n\n\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n\n      var columnCursor = 0;\n      var treeNode; // Collect all parent nodes that depend on the collapsed node.\n\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n            origColspan = _node$data.origColspan,\n            nodeHeaderLevel = _node$data.headerLevel;\n\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            return false; // Cancel tree traversing.\n          }\n\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n\n      var columnIndex = 0;\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            colspan = _ref2[1].data.colspan; // Map tree range (colspan range/width) into visual column index of the root node.\n\n\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n\n        columnIndex += colspan;\n      });\n    }\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n\n      var columnIndex = 0;\n\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n\n        var rootNode = new TreeNode();\n\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n\n      this.rebuildTreeIndex();\n    }\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n\n        var node;\n\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n    /**\n     * Clears the tree to the initial state.\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n\n  return HeadersTree;\n}();\n\nexport { HeadersTree as default };","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","Array","from","test","len","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_classPrivateFieldInitSpec","privateMap","_checkPrivateRedeclaration","set","privateCollection","has","_classPrivateFieldGet","receiver","_classExtractFieldDescriptor","_classApplyDescriptorGet","get","_classPrivateFieldSet","_classApplyDescriptorSet","action","arrayEach","TreeNode","_rootNodes","WeakMap","_rootsIndex","_sourceSettings","HeadersTree","sourceSettings","Map","getRoots","values","getRootByColumn","columnIndex","node","getNode","headerLevel","rootNode","normColumnIndex","columnCursor","treeNode","walkDown","_node$data","data","origColspan","nodeHeaderLevel","rebuildTreeIndex","_this","clear","_ref","_ref2","colspan","buildTree","columnsCount","getColumnsCount","columnSettings","getHeaderSettings","buildLeaves","parentNode","_this2","extractionLength","undefined","columnsSettings","getHeadersSettings","nodeData","addChild","getLayersCount","default"],"sources":["/home/ubuntu/community/vue-web/node_modules/handsontable/plugins/nestedHeaders/stateManager/headersTree.mjs"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nvar _rootNodes = /*#__PURE__*/new WeakMap();\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\nvar HeadersTree = /*#__PURE__*/function () {\n  /**\n   * The collection of nested headers settings structured into trees. The root trees are stored\n   * under the visual column index.\n   *\n   * @private\n   * @type {Map<number, TreeNode>}\n   */\n\n  /**\n   * A map that translates the visual column indexes that intersect the range\n   * defined by the header colspan width to the root index.\n   *\n   * @private\n   * @type {Map<number, number>}\n   */\n\n  /**\n   * The instance of the SourceSettings class.\n   *\n   * @private\n   * @type {SourceSettings}\n   */\n\n  function HeadersTree(sourceSettings) {\n    _classCallCheck(this, HeadersTree);\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n  _createClass(HeadersTree, [{\n    key: \"getRoots\",\n    value: function getRoots() {\n      return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n    }\n\n    /**\n     * Gets a root node by specified visual column index.\n     *\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getRootByColumn\",\n    value: function getRootByColumn(columnIndex) {\n      var node;\n      if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n        node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n      }\n      return node;\n    }\n\n    /**\n     * Gets a tree node by its position in the grid settings.\n     *\n     * @param {number} headerLevel Header level index (there is support only for positive values).\n     * @param {number} columnIndex A visual column index.\n     * @returns {TreeNode|undefined}\n     */\n  }, {\n    key: \"getNode\",\n    value: function getNode(headerLevel, columnIndex) {\n      var rootNode = this.getRootByColumn(columnIndex);\n      if (!rootNode) {\n        return;\n      }\n\n      // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n      // by root node colspan width.\n      var normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n      var columnCursor = 0;\n      var treeNode;\n\n      // Collect all parent nodes that depend on the collapsed node.\n      rootNode.walkDown(function (node) {\n        var _node$data = node.data,\n          origColspan = _node$data.origColspan,\n          nodeHeaderLevel = _node$data.headerLevel;\n        if (headerLevel === nodeHeaderLevel) {\n          if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n            treeNode = node;\n            return false; // Cancel tree traversing.\n          }\n\n          columnCursor += origColspan;\n        }\n      });\n      return treeNode;\n    }\n\n    /**\n     * Builds (or rebuilds if called again) root nodes indexes.\n     */\n  }, {\n    key: \"rebuildTreeIndex\",\n    value: function rebuildTreeIndex() {\n      var _this = this;\n      var columnIndex = 0;\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n      arrayEach(_classPrivateFieldGet(this, _rootNodes), function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          colspan = _ref2[1].data.colspan;\n        // Map tree range (colspan range/width) into visual column index of the root node.\n        for (var i = columnIndex; i < columnIndex + colspan; i++) {\n          _classPrivateFieldGet(_this, _rootsIndex).set(i, columnIndex);\n        }\n        columnIndex += colspan;\n      });\n    }\n\n    /**\n     * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n     * from the previous call.\n     */\n  }, {\n    key: \"buildTree\",\n    value: function buildTree() {\n      this.clear();\n      var columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n      var columnIndex = 0;\n      while (columnIndex < columnsCount) {\n        var columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n        var rootNode = new TreeNode();\n        _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n        this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n        columnIndex += columnSettings.origColspan;\n      }\n      this.rebuildTreeIndex();\n    }\n\n    /**\n     * Builds leaves for specified tree node.\n     *\n     * @param {TreeNode} parentNode A node to which the leaves applies.\n     * @param {number} columnIndex A visual column index.\n     * @param {number} headerLevel Currently processed header level.\n     * @param {number} [extractionLength=1] Determines column extraction length for node children.\n     */\n  }, {\n    key: \"buildLeaves\",\n    value: function buildLeaves(parentNode, columnIndex, headerLevel) {\n      var _this2 = this;\n      var extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n      var columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n      headerLevel += 1;\n      arrayEach(columnsSettings, function (columnSettings) {\n        var nodeData = _objectSpread(_objectSpread({}, columnSettings), {}, {\n          /**\n           * The header level (tree node depth level).\n           *\n           * @type {number}\n           */\n          headerLevel: headerLevel - 1,\n          /**\n           * A visual column index.\n           *\n           * @type {number}\n           */\n          columnIndex: columnIndex\n        });\n        var node;\n        if (headerLevel === 1) {\n          // fill the root node\n          parentNode.data = nodeData;\n          node = parentNode;\n        } else {\n          node = new TreeNode(nodeData);\n          parentNode.addChild(node);\n        }\n        if (headerLevel < _classPrivateFieldGet(_this2, _sourceSettings).getLayersCount()) {\n          _this2.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n        }\n        columnIndex += columnSettings.origColspan;\n      });\n    }\n\n    /**\n     * Clears the tree to the initial state.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(this, _rootNodes).clear();\n      _classPrivateFieldGet(this, _rootsIndex).clear();\n    }\n  }]);\n  return HeadersTree;\n}();\nexport { HeadersTree as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}