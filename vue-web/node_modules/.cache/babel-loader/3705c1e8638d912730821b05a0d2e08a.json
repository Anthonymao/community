{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\n\nvar ViewportColumnsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for column viewport calculation.\n   * @param {number} options.viewportSize Width of the viewport.\n   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.\n   * @param {number} options.totalItems Total number of columns.\n   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.\n   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.\n   */\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        viewportSize = _ref.viewportSize,\n        scrollOffset = _ref.scrollOffset,\n        totalItems = _ref.totalItems,\n        itemSizeFn = _ref.itemSizeFn,\n        overrideFn = _ref.overrideFn,\n        calculationType = _ref.calculationType,\n        stretchMode = _ref.stretchMode,\n        _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n        stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n      return width;\n    } : _ref$stretchingItemWi;\n\n    _classCallCheck(this, ViewportColumnsCalculator);\n\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n    /**\n     * Number of rendered/visible columns.\n     *\n     * @type {number}\n     */\n\n    this.count = 0;\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n\n    this.startColumn = null;\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n\n    this.endColumn = null;\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n  /**\n   * Calculates viewport.\n   */\n\n\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        } // +1 pixel for row header width compensation for horizontal scroll > 0\n\n\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n\n          this.endColumn = i;\n        }\n\n        startPositions.push(sum);\n        sum += columnWidth;\n\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n\n      this.startPosition = startPositions[this.startColumn];\n\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      } // If totalColumns exceeded its total columns size set endColumn to the latest item\n\n\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {number} totalWidth The total width of the table.\n     */\n\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n\n      var remainingSize = totalColumnsWidth - sumAll;\n\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number|null}\n     */\n\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n\n      return result;\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n\n      return this.stretchAllColumnsWidth[column];\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number|null}\n     * @private\n     */\n\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n\n      return null;\n    }\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number}\n     * @private\n     */\n\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n\n      return width;\n    }\n  }], [{\n    key: \"DEFAULT_WIDTH\",\n    get:\n    /**\n     * Default column width.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 50;\n    }\n  }]);\n\n  return ViewportColumnsCalculator;\n}();\n\nexport default ViewportColumnsCalculator;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","RENDER_TYPE","FULLY_VISIBLE_TYPE","privatePool","WeakMap","ViewportColumnsCalculator","_ref","arguments","undefined","viewportSize","scrollOffset","totalItems","itemSizeFn","overrideFn","calculationType","stretchMode","_ref$stretchingItemWi","stretchingItemWidthFn","width","set","viewportWidth","totalColumns","columnWidthFn","stretchingColumnWidthFn","count","startColumn","endColumn","startPosition","stretchAllRatio","stretchLastWidth","stretch","totalTargetWidth","needVerifyLastColumnWidth","stretchAllColumnsWidth","calculate","value","sum","needReverse","startPositions","columnWidth","priv","get","_getColumnWidth","compensatedViewportWidth","push","viewportSum","refreshStretching","totalWidth","totalColumnsWidth","sumAll","permanentColumnWidth","remainingSize","Infinity","_columnWidth","lastColumnWidth","getStretchedColumnWidth","column","baseWidth","result","_getStretchedAllColumnWidth","_getStretchedLastColumnWidth","sumRatioWidth","stretchedWidth","Math","round","newStretchedWidth","isNaN","DEFAULT_WIDTH"],"sources":["/home/ubuntu/community/vue-web/node_modules/handsontable/3rdparty/walkontable/src/calculator/viewportColumns.mjs"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nvar privatePool = new WeakMap();\n\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\nvar ViewportColumnsCalculator = /*#__PURE__*/function () {\n  /**\n   * @param {object} options Object with all options specified for column viewport calculation.\n   * @param {number} options.viewportSize Width of the viewport.\n   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.\n   * @param {number} options.totalItems Total number of columns.\n   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.\n   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.\n   */\n  function ViewportColumnsCalculator() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      viewportSize = _ref.viewportSize,\n      scrollOffset = _ref.scrollOffset,\n      totalItems = _ref.totalItems,\n      itemSizeFn = _ref.itemSizeFn,\n      overrideFn = _ref.overrideFn,\n      calculationType = _ref.calculationType,\n      stretchMode = _ref.stretchMode,\n      _ref$stretchingItemWi = _ref.stretchingItemWidthFn,\n      stretchingItemWidthFn = _ref$stretchingItemWi === void 0 ? function (width) {\n        return width;\n      } : _ref$stretchingItemWi;\n    _classCallCheck(this, ViewportColumnsCalculator);\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset: scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn: overrideFn,\n      calculationType: calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn\n    });\n\n    /**\n     * Number of rendered/visible columns.\n     *\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    this.startColumn = null;\n\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    this.endColumn = null;\n\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n    this.startPosition = null;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  _createClass(ViewportColumnsCalculator, [{\n    key: \"calculate\",\n    value: function calculate() {\n      var sum = 0;\n      var needReverse = true;\n      var startPositions = [];\n      var columnWidth;\n      var priv = privatePool.get(this);\n      var calculationType = priv.calculationType;\n      var overrideFn = priv.overrideFn;\n      var scrollOffset = priv.scrollOffset;\n      var totalColumns = priv.totalColumns;\n      var viewportWidth = priv.viewportWidth;\n      for (var i = 0; i < totalColumns; i++) {\n        columnWidth = this._getColumnWidth(i);\n        if (sum <= scrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn = i;\n        }\n\n        // +1 pixel for row header width compensation for horizontal scroll > 0\n        var compensatedViewportWidth = scrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n        if (sum >= scrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= scrollOffset + compensatedViewportWidth) {\n          if (this.startColumn === null || this.startColumn === void 0) {\n            this.startColumn = i;\n          }\n          this.endColumn = i;\n        }\n        startPositions.push(sum);\n        sum += columnWidth;\n        if (calculationType !== FULLY_VISIBLE_TYPE) {\n          this.endColumn = i;\n        }\n        if (sum >= scrollOffset + viewportWidth) {\n          needReverse = false;\n          break;\n        }\n      }\n      if (this.endColumn === totalColumns - 1 && needReverse) {\n        this.startColumn = this.endColumn;\n        while (this.startColumn > 0) {\n          var viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n          if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n            this.startColumn -= 1;\n          }\n          if (viewportSum > viewportWidth) {\n            break;\n          }\n        }\n      }\n      if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n        overrideFn(this);\n      }\n      this.startPosition = startPositions[this.startColumn];\n      if (this.startPosition === void 0) {\n        this.startPosition = null;\n      }\n\n      // If totalColumns exceeded its total columns size set endColumn to the latest item\n      if (totalColumns < this.endColumn) {\n        this.endColumn = totalColumns - 1;\n      }\n      if (this.startColumn !== null) {\n        this.count = this.endColumn - this.startColumn + 1;\n      }\n    }\n\n    /**\n     * Recalculate columns stretching.\n     *\n     * @param {number} totalWidth The total width of the table.\n     */\n  }, {\n    key: \"refreshStretching\",\n    value: function refreshStretching(totalWidth) {\n      if (this.stretch === 'none') {\n        return;\n      }\n      var totalColumnsWidth = totalWidth;\n      this.totalTargetWidth = totalColumnsWidth;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      var sumAll = 0;\n      for (var i = 0; i < totalColumns; i++) {\n        var columnWidth = this._getColumnWidth(i);\n        var permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n        if (typeof permanentColumnWidth === 'number') {\n          totalColumnsWidth -= permanentColumnWidth;\n        } else {\n          sumAll += columnWidth;\n        }\n      }\n      var remainingSize = totalColumnsWidth - sumAll;\n      if (this.stretch === 'all' && remainingSize > 0) {\n        this.stretchAllRatio = totalColumnsWidth / sumAll;\n        this.stretchAllColumnsWidth = [];\n        this.needVerifyLastColumnWidth = true;\n      } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n        var _columnWidth = this._getColumnWidth(totalColumns - 1);\n        var lastColumnWidth = remainingSize + _columnWidth;\n        this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : _columnWidth;\n      }\n    }\n\n    /**\n     * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n     *\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number|null}\n     */\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(column, baseWidth) {\n      var result = null;\n      if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n        result = this._getStretchedAllColumnWidth(column, baseWidth);\n      } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n        result = this._getStretchedLastColumnWidth(column);\n      }\n      return result;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @param {number} baseWidth The default column width.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedAllColumnWidth\",\n    value: function _getStretchedAllColumnWidth(column, baseWidth) {\n      var sumRatioWidth = 0;\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (!this.stretchAllColumnsWidth[column]) {\n        var stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n        var newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n        if (newStretchedWidth === void 0) {\n          this.stretchAllColumnsWidth[column] = stretchedWidth;\n        } else {\n          this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n        }\n      }\n      if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n        this.needVerifyLastColumnWidth = false;\n        for (var i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n          sumRatioWidth += this.stretchAllColumnsWidth[i];\n        }\n        if (sumRatioWidth !== this.totalTargetWidth) {\n          this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n        }\n      }\n      return this.stretchAllColumnsWidth[column];\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number|null}\n     * @private\n     */\n  }, {\n    key: \"_getStretchedLastColumnWidth\",\n    value: function _getStretchedLastColumnWidth(column) {\n      var priv = privatePool.get(this);\n      var totalColumns = priv.totalColumns;\n      if (column === totalColumns - 1) {\n        return this.stretchLastWidth;\n      }\n      return null;\n    }\n\n    /**\n     * @param {number} column The visual column index.\n     * @returns {number}\n     * @private\n     */\n  }, {\n    key: \"_getColumnWidth\",\n    value: function _getColumnWidth(column) {\n      var width = privatePool.get(this).columnWidthFn(column);\n      if (isNaN(width)) {\n        width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n      }\n      return width;\n    }\n  }], [{\n    key: \"DEFAULT_WIDTH\",\n    get:\n    /**\n     * Default column width.\n     *\n     * @type {number}\n     */\n    function get() {\n      return 50;\n    }\n  }]);\n  return ViewportColumnsCalculator;\n}();\nexport default ViewportColumnsCalculator;"],"mappings":"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"},"metadata":{},"sourceType":"module"}