{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\n\nvar ColumnUtils = /*#__PURE__*/function () {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  function ColumnUtils(dataAccessObject, wtSettings) {\n    _classCallCheck(this, ColumnUtils);\n\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n    this.headerWidths = new Map();\n  }\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n\n\n  _createClass(ColumnUtils, [{\n    key: \"getWidth\",\n    value: function getWidth(sourceIndex) {\n      return this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n    }\n    /**\n     * Returns stretched column width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(sourceIndex) {\n      var calculator = this.dataAccessObject.wtViewport.columnsRenderCalculator;\n      var width = this.getWidth(sourceIndex);\n\n      if (calculator) {\n        var stretchedWidth = calculator.getStretchedColumnWidth(sourceIndex, width);\n\n        if (stretchedWidth) {\n          width = stretchedWidth;\n        }\n      }\n\n      return width;\n    }\n    /**\n     * Returns column header height based on passed header level.\n     *\n     * @param {number} level Column header level.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight(level) {\n      var height = this.wtSettings.getSetting('defaultRowHeight');\n      var oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n\n      if (oversizedHeight !== void 0) {\n        height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n      }\n\n      return height;\n    }\n    /**\n     * Returns column header width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n\n  }, {\n    key: \"getHeaderWidth\",\n    value: function getHeaderWidth(sourceIndex) {\n      return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n    }\n    /**\n     * Calculates column header widths that can be retrieved from the cache.\n     */\n\n  }, {\n    key: \"calculateWidths\",\n    value: function calculateWidths() {\n      var wtSettings = this.wtSettings;\n      var _this$dataAccessObjec = this.dataAccessObject,\n          wtTable = _this$dataAccessObjec.wtTable,\n          wtViewport = _this$dataAccessObjec.wtViewport,\n          cloneSource = _this$dataAccessObjec.cloneSource;\n      var mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n      var scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n      var rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n      wtViewport.columnsRenderCalculator.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n      rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n\n      if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== void 0) {\n        var rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n        var defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n\n        for (var visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n          var width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n          width = width === null || width === void 0 ? defaultColumnWidth : width;\n          this.headerWidths.set(visibleColumnIndex, width);\n        }\n      }\n    }\n  }]);\n\n  return ColumnUtils;\n}();\n\nexport { ColumnUtils as default };","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","getScrollbarWidth","ColumnUtils","dataAccessObject","wtSettings","headerWidths","Map","value","getWidth","sourceIndex","getSetting","getStretchedColumnWidth","calculator","wtViewport","columnsRenderCalculator","width","stretchedWidth","getHeaderHeight","level","height","oversizedHeight","oversizedColumnHeaders","Math","max","getHeaderWidth","get","wtTable","columnFilter","sourceToRendered","calculateWidths","_this$dataAccessObjec","cloneSource","mainHolder","holder","scrollbarCompensation","offsetHeight","scrollHeight","rowHeaderWidthSetting","refreshStretching","getViewportWidth","rowHeadersCount","defaultColumnWidth","visibleColumnIndex","Array","isArray","set","default"],"sources":["/home/ubuntu/community/vue-web/node_modules/handsontable/3rdparty/walkontable/src/utils/column.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nimport { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\"; /**\n                                                                            * Column utils class contains all necessary information about sizes of the columns.\n                                                                            *\n                                                                            * @class {ColumnUtils}\n                                                                            */\nvar ColumnUtils = /*#__PURE__*/function () {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  function ColumnUtils(dataAccessObject, wtSettings) {\n    _classCallCheck(this, ColumnUtils);\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n    this.headerWidths = new Map();\n  }\n\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  _createClass(ColumnUtils, [{\n    key: \"getWidth\",\n    value: function getWidth(sourceIndex) {\n      return this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n    }\n\n    /**\n     * Returns stretched column width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n  }, {\n    key: \"getStretchedColumnWidth\",\n    value: function getStretchedColumnWidth(sourceIndex) {\n      var calculator = this.dataAccessObject.wtViewport.columnsRenderCalculator;\n      var width = this.getWidth(sourceIndex);\n      if (calculator) {\n        var stretchedWidth = calculator.getStretchedColumnWidth(sourceIndex, width);\n        if (stretchedWidth) {\n          width = stretchedWidth;\n        }\n      }\n      return width;\n    }\n\n    /**\n     * Returns column header height based on passed header level.\n     *\n     * @param {number} level Column header level.\n     * @returns {number}\n     */\n  }, {\n    key: \"getHeaderHeight\",\n    value: function getHeaderHeight(level) {\n      var height = this.wtSettings.getSetting('defaultRowHeight');\n      var oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n      if (oversizedHeight !== void 0) {\n        height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n      }\n      return height;\n    }\n\n    /**\n     * Returns column header width based on passed source index.\n     *\n     * @param {number} sourceIndex Column source index.\n     * @returns {number}\n     */\n  }, {\n    key: \"getHeaderWidth\",\n    value: function getHeaderWidth(sourceIndex) {\n      return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n    }\n\n    /**\n     * Calculates column header widths that can be retrieved from the cache.\n     */\n  }, {\n    key: \"calculateWidths\",\n    value: function calculateWidths() {\n      var wtSettings = this.wtSettings;\n      var _this$dataAccessObjec = this.dataAccessObject,\n        wtTable = _this$dataAccessObjec.wtTable,\n        wtViewport = _this$dataAccessObjec.wtViewport,\n        cloneSource = _this$dataAccessObjec.cloneSource;\n      var mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n      var scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n      var rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n      wtViewport.columnsRenderCalculator.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n      rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n      if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== void 0) {\n        var rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n        var defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n        for (var visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n          var width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n          width = width === null || width === void 0 ? defaultColumnWidth : width;\n          this.headerWidths.set(visibleColumnIndex, width);\n        }\n      }\n    }\n  }]);\n  return ColumnUtils;\n}();\nexport { ColumnUtils as default };"],"mappings":"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"},"metadata":{},"sourceType":"module"}