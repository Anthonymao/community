{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { empty, addClass } from \"../../helpers/dom/element.mjs\";\nimport { isEmpty, stringify } from \"../../helpers/mixed.mjs\";\nimport { SHORTCUTS_GROUP_EDITOR } from \"../../editorManager.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\nvar ATTR_ROW = 'data-row';\nvar ATTR_COLUMN = 'data-col';\nvar SHORTCUTS_GROUP = 'checkboxRenderer';\nexport var RENDERER_TYPE = 'checkbox';\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\n  var label = cellMeta.label,\n      type = cellMeta.type,\n      row = cellMeta.row,\n      column = cellMeta.column,\n      prop = cellMeta.prop;\n\n  if (type !== RENDERER_TYPE) {\n    return;\n  }\n\n  if (label) {\n    var labelValue = label.value,\n        labelProperty = label.property;\n    var labelText = cellValue;\n\n    if (labelValue) {\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\n    } else if (labelProperty) {\n      var labelData = this.getDataAtRowProp(row, labelProperty);\n      labelText = labelData !== null ? labelData : cellValue;\n    }\n\n    bundleSeed = labelText;\n  }\n\n  return bundleSeed;\n});\n/**\n * Checkbox renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\n\nexport function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = false;\n  } else if (isEmpty(value)) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n\n  input.setAttribute(ATTR_ROW, row);\n  input.setAttribute(ATTR_COLUMN, col);\n\n  if (!badValue && labelOptions) {\n    var labelText = '';\n\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n\n    var label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\n\n    if (labelOptions.position === 'before') {\n      if (labelOptions.separated) {\n        TD.appendChild(label);\n        TD.appendChild(input);\n      } else {\n        label.appendChild(input);\n        input = label;\n      }\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\n      if (labelOptions.separated) {\n        TD.appendChild(input);\n        TD.appendChild(label);\n      } else {\n        label.insertBefore(input, label.firstChild);\n        input = label;\n      }\n    }\n  }\n\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\n    TD.appendChild(input);\n  }\n\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    registerShortcuts();\n  }\n  /**\n   * Register shortcuts responsible for toggling checkbox state.\n   *\n   * @private\n   */\n\n\n  function registerShortcuts() {\n    var shortcutManager = instance.getShortcutManager();\n    var gridContext = shortcutManager.getContext('grid');\n    var config = {\n      group: SHORTCUTS_GROUP\n    };\n    gridContext.addShortcuts([{\n      keys: [['space']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      }\n    }, {\n      keys: [['enter']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n      runOnlyIf: function runOnlyIf() {\n        return instance.getSettings().enterBeginsEditing;\n      }\n    }, {\n      keys: [['delete'], ['backspace']],\n      callback: function callback() {\n        changeSelectedCheckboxesState(true);\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    }], config);\n  }\n  /**\n   * Change checkbox checked property.\n   *\n   * @private\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\n   */\n\n\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRange();\n\n    if (!selRange) {\n      return;\n    }\n\n    for (var key = 0; key < selRange.length; key++) {\n      var _selRange$key$getTopS = selRange[key].getTopStartCorner(),\n          startRow = _selRange$key$getTopS.row,\n          startColumn = _selRange$key$getTopS.col;\n\n      var _selRange$key$getBott = selRange[key].getBottomEndCorner(),\n          endRow = _selRange$key$getBott.row,\n          endColumn = _selRange$key$getBott.col;\n\n      var changes = [];\n\n      for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n        for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n          /* eslint-disable no-continue */\n\n\n          if (cachedCellProperties.readOnly === true) {\n            continue;\n          }\n\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n            cachedCellProperties.checkedTemplate = true;\n          }\n\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n            cachedCellProperties.uncheckedTemplate = false;\n          }\n\n          var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n\n          if (uncheckCheckbox === false) {\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n            }\n          } else {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          }\n        }\n      }\n\n      if (changes.length > 0) {\n        instance.setDataAtCell(changes);\n      }\n    }\n  }\n  /**\n   * Check whether all selected cells are with checkbox type.\n   *\n   * @returns {boolean}\n   * @private\n   */\n\n\n  function areSelectedCheckboxCells() {\n    var selRange = instance.getSelectedRange();\n\n    if (!selRange) {\n      return;\n    }\n\n    for (var key = 0; key < selRange.length; key++) {\n      var topLeft = selRange[key].getTopStartCorner();\n      var bottomRight = selRange[key].getBottomEndCorner();\n\n      for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n        for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n\n          if (cachedCellProperties.type !== 'checkbox') {\n            return false;\n          }\n\n          var cell = instance.getCell(visualRow, visualColumn);\n\n          if (cell === null || cell === void 0) {\n            return true;\n          } else {\n            var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n}\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\n/**\n * Register checkbox listeners.\n *\n * @param {Core} instance The Handsontable instance.\n * @returns {EventManager}\n */\n\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n\n  return eventManager;\n}\n/**\n * Create input element.\n *\n * @param {Document} rootDocument The document owner.\n * @returns {Node}\n */\n\n\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n/**\n * Create label element.\n *\n * @param {Document} rootDocument The document owner.\n * @param {string} text The label text.\n * @param {boolean} fullWidth Determines whether label should have full width.\n * @returns {Node}\n */\n\n\nfunction createLabel(rootDocument, text, fullWidth) {\n  var label = rootDocument.createElement('label');\n  label.className = \"htCheckboxRendererLabel \".concat(fullWidth ? 'fullWidth' : '');\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Core} instance The Handsontable instance.\n */\n\n\nfunction onMouseUp(event, instance) {\n  var target = event.target;\n\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n\n  setTimeout(instance.listen, 10);\n}\n/**\n * `click` callback.\n *\n * @private\n * @param {MouseEvent} event `click` event.\n * @param {Core} instance The Handsontable instance.\n */\n\n\nfunction onClick(event, instance) {\n  var target = event.target;\n\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Core} instance The Handsontable instance.\n */\n\n\nfunction onChange(event, instance) {\n  var target = event.target;\n\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {boolean}\n */\n\n\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}","map":{"version":3,"names":["baseRenderer","EventManager","empty","addClass","isEmpty","stringify","SHORTCUTS_GROUP_EDITOR","Hooks","isListeningKeyDownEvent","WeakMap","isCheckboxListenerAdded","BAD_VALUE_CLASS","ATTR_ROW","ATTR_COLUMN","SHORTCUTS_GROUP","RENDERER_TYPE","getSingleton","add","bundleSeed","cellMeta","cellValue","label","type","row","column","prop","labelValue","value","labelProperty","property","labelText","labelData","getDataAtRowProp","checkboxRenderer","instance","TD","col","cellProperties","rootDocument","apply","registerEvents","input","createInput","labelOptions","badValue","checkedTemplate","uncheckedTemplate","toLocaleLowerCase","locale","checked","style","display","setAttribute","call","createLabel","separated","position","appendChild","insertBefore","firstChild","createTextNode","has","set","registerShortcuts","shortcutManager","getShortcutManager","gridContext","getContext","config","group","addShortcuts","keys","callback","changeSelectedCheckboxesState","areSelectedCheckboxCells","runOnlyIf","getSettings","enterBeginsEditing","relativeToGroup","uncheckCheckbox","arguments","length","undefined","selRange","getSelectedRange","key","_selRange$key$getTopS","getTopStartCorner","startRow","startColumn","_selRange$key$getBott","getBottomEndCorner","endRow","endColumn","changes","visualRow","visualColumn","cachedCellProperties","getCellMeta","readOnly","dataAtCell","getDataAtCell","toString","includes","push","setDataAtCell","topLeft","bottomRight","cell","getCell","checkboxes","querySelectorAll","eventManager","get","rootElement","addEventListener","event","onClick","onMouseUp","onChange","createElement","className","cloneNode","text","fullWidth","concat","target","isCheckboxInput","hasAttribute","setTimeout","listen","parseInt","getAttribute","preventDefault","newCheckboxValue","element","tagName"],"sources":["/home/ubuntu/community/vue-web/node_modules/handsontable/renderers/checkboxRenderer/checkboxRenderer.mjs"],"sourcesContent":["import \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { empty, addClass } from \"../../helpers/dom/element.mjs\";\nimport { isEmpty, stringify } from \"../../helpers/mixed.mjs\";\nimport { SHORTCUTS_GROUP_EDITOR } from \"../../editorManager.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nvar isListeningKeyDownEvent = new WeakMap();\nvar isCheckboxListenerAdded = new WeakMap();\nvar BAD_VALUE_CLASS = 'htBadValue';\nvar ATTR_ROW = 'data-row';\nvar ATTR_COLUMN = 'data-col';\nvar SHORTCUTS_GROUP = 'checkboxRenderer';\nexport var RENDERER_TYPE = 'checkbox';\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\n  var label = cellMeta.label,\n    type = cellMeta.type,\n    row = cellMeta.row,\n    column = cellMeta.column,\n    prop = cellMeta.prop;\n  if (type !== RENDERER_TYPE) {\n    return;\n  }\n  if (label) {\n    var labelValue = label.value,\n      labelProperty = label.property;\n    var labelText = cellValue;\n    if (labelValue) {\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\n    } else if (labelProperty) {\n      var labelData = this.getDataAtRowProp(row, labelProperty);\n      labelText = labelData !== null ? labelData : cellValue;\n    }\n    bundleSeed = labelText;\n  }\n  return bundleSeed;\n});\n/**\n * Checkbox renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  var rootDocument = instance.rootDocument;\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  registerEvents(instance);\n  var input = createInput(rootDocument);\n  var labelOptions = cellProperties.label;\n  var badValue = false;\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = false;\n  } else if (isEmpty(value)) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n  input.setAttribute(ATTR_ROW, row);\n  input.setAttribute(ATTR_COLUMN, col);\n  if (!badValue && labelOptions) {\n    var labelText = '';\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      var labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n    var label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\n    if (labelOptions.position === 'before') {\n      if (labelOptions.separated) {\n        TD.appendChild(label);\n        TD.appendChild(input);\n      } else {\n        label.appendChild(input);\n        input = label;\n      }\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\n      if (labelOptions.separated) {\n        TD.appendChild(input);\n        TD.appendChild(label);\n      } else {\n        label.insertBefore(input, label.firstChild);\n        input = label;\n      }\n    }\n  }\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\n    TD.appendChild(input);\n  }\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    registerShortcuts();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling checkbox state.\n   *\n   * @private\n   */\n  function registerShortcuts() {\n    var shortcutManager = instance.getShortcutManager();\n    var gridContext = shortcutManager.getContext('grid');\n    var config = {\n      group: SHORTCUTS_GROUP\n    };\n    gridContext.addShortcuts([{\n      keys: [['space']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      }\n    }, {\n      keys: [['enter']],\n      callback: function callback() {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      runOnlyIf: function runOnlyIf() {\n        return instance.getSettings().enterBeginsEditing;\n      }\n    }, {\n      keys: [['delete'], ['backspace']],\n      callback: function callback() {\n        changeSelectedCheckboxesState(true);\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    }], config);\n  }\n\n  /**\n   * Change checkbox checked property.\n   *\n   * @private\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\n   */\n  function changeSelectedCheckboxesState() {\n    var uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (var key = 0; key < selRange.length; key++) {\n      var _selRange$key$getTopS = selRange[key].getTopStartCorner(),\n        startRow = _selRange$key$getTopS.row,\n        startColumn = _selRange$key$getTopS.col;\n      var _selRange$key$getBott = selRange[key].getBottomEndCorner(),\n        endRow = _selRange$key$getBott.row,\n        endColumn = _selRange$key$getBott.col;\n      var changes = [];\n      for (var visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n        for (var visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n\n          /* eslint-disable no-continue */\n          if (cachedCellProperties.readOnly === true) {\n            continue;\n          }\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n            cachedCellProperties.checkedTemplate = true;\n          }\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n            cachedCellProperties.uncheckedTemplate = false;\n          }\n          var dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n          if (uncheckCheckbox === false) {\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n            }\n          } else {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          }\n        }\n      }\n      if (changes.length > 0) {\n        instance.setDataAtCell(changes);\n      }\n    }\n  }\n\n  /**\n   * Check whether all selected cells are with checkbox type.\n   *\n   * @returns {boolean}\n   * @private\n   */\n  function areSelectedCheckboxCells() {\n    var selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (var key = 0; key < selRange.length; key++) {\n      var topLeft = selRange[key].getTopStartCorner();\n      var bottomRight = selRange[key].getBottomEndCorner();\n      for (var visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n        for (var visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n          var cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return false;\n          }\n          var cell = instance.getCell(visualRow, visualColumn);\n          if (cell === null || cell === void 0) {\n            return true;\n          } else {\n            var checkboxes = cell.querySelectorAll('input[type=checkbox]');\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\n\n/**\n * Register checkbox listeners.\n *\n * @param {Core} instance The Handsontable instance.\n * @returns {EventManager}\n */\nfunction registerEvents(instance) {\n  var eventManager = isCheckboxListenerAdded.get(instance);\n  if (!eventManager) {\n    var rootElement = instance.rootElement;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', function (event) {\n      return onClick(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'mouseup', function (event) {\n      return onMouseUp(event, instance);\n    });\n    eventManager.addEventListener(rootElement, 'change', function (event) {\n      return onChange(event, instance);\n    });\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n  return eventManager;\n}\n\n/**\n * Create input element.\n *\n * @param {Document} rootDocument The document owner.\n * @returns {Node}\n */\nfunction createInput(rootDocument) {\n  var input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n\n/**\n * Create label element.\n *\n * @param {Document} rootDocument The document owner.\n * @param {string} text The label text.\n * @param {boolean} fullWidth Determines whether label should have full width.\n * @returns {Node}\n */\nfunction createLabel(rootDocument, text, fullWidth) {\n  var label = rootDocument.createElement('label');\n  label.className = \"htCheckboxRendererLabel \".concat(fullWidth ? 'fullWidth' : '');\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onMouseUp(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  setTimeout(instance.listen, 10);\n}\n\n/**\n * `click` callback.\n *\n * @private\n * @param {MouseEvent} event `click` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onClick(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onChange(event, instance) {\n  var target = event.target;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  var row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  var col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  var cellProperties = instance.getCellMeta(row, col);\n  if (!cellProperties.readOnly) {\n    var newCheckboxValue = null;\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {boolean}\n */\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}