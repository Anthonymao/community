{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\n\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\n * Class responsible for all of the Autofill-related operations on merged cells.\n *\n * @private\n * @class AutofillCalculations\n */\n\nvar AutofillCalculations = /*#__PURE__*/function () {\n  function AutofillCalculations(plugin) {\n    _classCallCheck(this, AutofillCalculations);\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n\n\n    this.plugin = plugin;\n    /**\n     * Reference to the MergedCellsCollection class instance.\n     *\n     * @type {MergedCellsCollection}\n     */\n\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\n     * Cache of the currently processed autofill data.\n     *\n     * @private\n     * @type {object}\n     */\n\n    this.currentFillData = null;\n  }\n  /**\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\n   *\n   * @param {Array} selectionArea The selection to correct.\n   */\n\n\n  _createClass(AutofillCalculations, [{\n    key: \"correctSelectionAreaSize\",\n    value: function correctSelectionAreaSize(selectionArea) {\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n\n        if (mergedCell) {\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n        }\n      }\n    }\n    /**\n     * Get the direction of the autofill process.\n     *\n     * @param {Array} selectionArea The selection area.\n     * @param {Array} finalArea The final area (base + drag).\n     * @returns {string} `up`, `down`, `left` or `right`.\n     */\n\n  }, {\n    key: \"getDirection\",\n    value: function getDirection(selectionArea, finalArea) {\n      var direction = null;\n\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'down';\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'up';\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n        direction = 'right';\n      } else {\n        direction = 'left';\n      }\n\n      return direction;\n    }\n    /**\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\n     *\n     * @param {Array} baseArea The base selected area.\n     * @param {Array} dragArea The drag area.\n     * @param {string} dragDirection The autofill drag direction.\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\n     * @returns {Array} The new drag area.\n     */\n\n  }, {\n    key: \"snapDragArea\",\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n      var newDragArea = dragArea.slice(0);\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n\n      var _baseArea = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea[0],\n          baseAreaStartColumn = _baseArea[1],\n          baseAreaEndRow = _baseArea[2],\n          baseAreaEndColumn = _baseArea[3];\n\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n\n      if (farthestCollection) {\n        if (dragDirection === 'down') {\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n          var newLimit = newDragArea[2] + fill;\n\n          if (newLimit >= this.plugin.hot.countRows()) {\n            newDragArea[2] -= partials;\n          } else {\n            newDragArea[2] += partials ? fill : 0;\n          }\n        } else if (dragDirection === 'right') {\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n\n          var _newLimit = newDragArea[3] + _fill;\n\n          if (_newLimit >= this.plugin.hot.countCols()) {\n            newDragArea[3] -= partials;\n          } else {\n            newDragArea[3] += partials ? _fill : 0;\n          }\n        } else if (dragDirection === 'up') {\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\n\n          var _newLimit2 = newDragArea[0] + _fill2;\n\n          if (_newLimit2 < 0) {\n            newDragArea[0] += partials;\n          } else {\n            newDragArea[0] -= partials ? _fill2 : 0;\n          }\n        } else if (dragDirection === 'left') {\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\n\n          var _newLimit3 = newDragArea[1] + _fill3;\n\n          if (_newLimit3 < 0) {\n            newDragArea[1] += partials;\n          } else {\n            newDragArea[1] -= partials ? _fill3 : 0;\n          }\n        }\n      }\n\n      this.updateCurrentFillCache({\n        baseArea: baseArea,\n        dragDirection: dragDirection,\n        foundMergedCells: foundMergedCells,\n        fillSize: fillSize,\n        dragArea: newDragArea,\n        cycleLength: fullCycle\n      });\n      return newDragArea;\n    }\n    /**\n     * Update the current fill cache with the provided object.\n     *\n     * @private\n     * @param {object} updateObject The current filled object cache.\n     */\n\n  }, {\n    key: \"updateCurrentFillCache\",\n    value: function updateCurrentFillCache(updateObject) {\n      if (!this.currentFillData) {\n        this.currentFillData = {};\n      }\n\n      extend(this.currentFillData, updateObject);\n    }\n    /**\n     * Get the \"length\" of the drag area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @returns {number|null} The \"length\" (height or width, depending on the direction) of the drag.\n     */\n\n  }, {\n    key: \"getAutofillSize\",\n    value: function getAutofillSize(baseArea, dragArea, direction) {\n      var _baseArea2 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea2[0],\n          baseAreaStartColumn = _baseArea2[1],\n          baseAreaEndRow = _baseArea2[2],\n          baseAreaEndColumn = _baseArea2[3];\n\n      var _dragArea = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea[0],\n          dragAreaStartColumn = _dragArea[1],\n          dragAreaEndRow = _dragArea[2],\n          dragAreaEndColumn = _dragArea[3];\n\n      switch (direction) {\n        case 'up':\n          return baseAreaStartRow - dragAreaStartRow;\n\n        case 'down':\n          return dragAreaEndRow - baseAreaEndRow;\n\n        case 'left':\n          return baseAreaStartColumn - dragAreaStartColumn;\n\n        case 'right':\n          return dragAreaEndColumn - baseAreaEndColumn;\n\n        default:\n          return null;\n      }\n    }\n    /**\n     * Trim the default drag area (containing the selection area) to the drag-only area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The base selection area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {Array|null} Array representing the drag area coordinates.\n     */\n\n  }, {\n    key: \"getDragArea\",\n    value: function getDragArea(baseArea, dragArea, direction) {\n      var _baseArea3 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea3[0],\n          baseAreaStartColumn = _baseArea3[1],\n          baseAreaEndRow = _baseArea3[2],\n          baseAreaEndColumn = _baseArea3[3];\n\n      var _dragArea2 = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea2[0],\n          dragAreaStartColumn = _dragArea2[1],\n          dragAreaEndRow = _dragArea2[2],\n          dragAreaEndColumn = _dragArea2[3];\n\n      switch (direction) {\n        case 'up':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n\n        case 'down':\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n\n        case 'left':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n\n        case 'right':\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n\n        default:\n          return null;\n      }\n    }\n    /**\n     * Get the to-be-farthest merged cell in the newly filled area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\n     * @returns {MergedCellCoords|null}\n     */\n\n  }, {\n    key: \"getFarthestCollection\",\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n      var _baseArea4 = _slicedToArray(baseArea, 4),\n          baseAreaStartRow = _baseArea4[0],\n          baseAreaStartColumn = _baseArea4[1],\n          baseAreaEndRow = _baseArea4[2],\n          baseAreaEndColumn = _baseArea4[3];\n\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var inclusionFunctionName = null;\n      var farthestCollection = null;\n      var endOfDragRecreationIndex = null;\n\n      switch (direction) {\n        case 'up':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n\n        case 'left':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n\n        case 'down':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n\n        case 'right':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n\n        default:\n      }\n\n      arrayEach(mergedCellArray, function (currentCollection) {\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n          farthestCollection = currentCollection;\n        }\n      });\n      return farthestCollection;\n    }\n    /**\n     * Recreate the merged cells after the autofill process.\n     *\n     * @param {Array} changes Changes made.\n     */\n\n  }, {\n    key: \"recreateAfterDataPopulation\",\n    value: function recreateAfterDataPopulation(changes) {\n      if (!this.currentFillData) {\n        return;\n      }\n\n      var fillRange = this.getRangeFromChanges(changes);\n      var foundMergedCells = this.currentFillData.foundMergedCells;\n      var dragDirection = this.currentFillData.dragDirection;\n\n      var inBounds = function inBounds(current, offset) {\n        switch (dragDirection) {\n          case 'up':\n            return current.row - offset >= fillRange.from.row;\n\n          case 'down':\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n\n          case 'left':\n            return current.col - offset >= fillRange.from.column;\n\n          case 'right':\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n\n          default:\n            return null;\n        }\n      };\n\n      var fillOffset = 0;\n      var current = null;\n      var multiplier = 1;\n\n      do {\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\n          current = foundMergedCells[j];\n          fillOffset = multiplier * this.currentFillData.cycleLength;\n\n          if (inBounds(current, fillOffset)) {\n            switch (dragDirection) {\n              case 'up':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row - fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'down':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row + fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'left':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col - fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n\n              case 'right':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col + fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n\n              default:\n            }\n          }\n\n          if (j === foundMergedCells.length - 1) {\n            multiplier += 1;\n          }\n        }\n      } while (inBounds(current, fillOffset));\n\n      this.currentFillData = null;\n      this.plugin.hot.render();\n    }\n    /**\n     * Get the drag range from the changes made.\n     *\n     * @private\n     * @param {Array} changes The changes made.\n     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.\n     */\n\n  }, {\n    key: \"getRangeFromChanges\",\n    value: function getRangeFromChanges(changes) {\n      var _this = this;\n\n      var rows = {\n        min: null,\n        max: null\n      };\n      var columns = {\n        min: null,\n        max: null\n      };\n      arrayEach(changes, function (change) {\n        var rowIndex = change[0];\n\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\n\n        if (rows.min === null || rowIndex < rows.min) {\n          rows.min = rowIndex;\n        }\n\n        if (rows.max === null || rowIndex > rows.max) {\n          rows.max = rowIndex;\n        }\n\n        if (columns.min === null || columnIndex < columns.min) {\n          columns.min = columnIndex;\n        }\n\n        if (columns.max === null || columnIndex > columns.max) {\n          columns.max = columnIndex;\n        }\n      });\n      return {\n        from: {\n          row: rows.min,\n          column: columns.min\n        },\n        to: {\n          row: rows.max,\n          column: columns.max\n        }\n      };\n    }\n    /**\n     * Check if the drag area contains any merged cells.\n     *\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} fullArea The base area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"dragAreaOverlapsCollections\",\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\n\n      var _dragArea3 = _slicedToArray(dragArea, 4),\n          dragAreaStartRow = _dragArea3[0],\n          dragAreaStartColumn = _dragArea3[1],\n          dragAreaEndRow = _dragArea3[2],\n          dragAreaEndColumn = _dragArea3[3];\n\n      var topLeft = this.plugin.hot._createCellCoords(dragAreaStartRow, dragAreaStartColumn);\n\n      var bottomRight = this.plugin.hot._createCellCoords(dragAreaEndRow, dragAreaEndColumn);\n\n      var dragRange = this.plugin.hot._createCellRange(topLeft, topLeft, bottomRight);\n\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n    }\n  }]);\n\n  return AutofillCalculations;\n}();\n\nexport default AutofillCalculations;","map":{"version":3,"names":["_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","len","length","arr2","_i","Symbol","iterator","_arr","_n","_d","_s","_e","next","done","push","value","err","isArray","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","extend","arrayEach","AutofillCalculations","plugin","mergedCellsCollection","currentFillData","correctSelectionAreaSize","selectionArea","mergedCell","get","rowspan","colspan","getDirection","finalArea","direction","snapDragArea","baseArea","dragArea","dragDirection","foundMergedCells","newDragArea","fillSize","getAutofillSize","_baseArea","baseAreaStartRow","baseAreaStartColumn","baseAreaEndRow","baseAreaEndColumn","verticalDirection","indexOf","fullCycle","fulls","Math","floor","partials","farthestCollection","getFarthestCollection","fill","row","newLimit","hot","countRows","_fill","col","_newLimit","countCols","_fill2","_newLimit2","_fill3","_newLimit3","updateCurrentFillCache","cycleLength","updateObject","_baseArea2","_dragArea","dragAreaStartRow","dragAreaStartColumn","dragAreaEndRow","dragAreaEndColumn","getDragArea","_baseArea3","_dragArea2","mergedCellArray","_baseArea4","baseEnd","baseStart","inclusionFunctionName","endOfDragRecreationIndex","currentCollection","isFarther","recreateAfterDataPopulation","changes","fillRange","getRangeFromChanges","inBounds","current","offset","to","column","fillOffset","multiplier","j","add","render","_this","rows","min","max","columns","change","rowIndex","columnIndex","propToCol","dragAreaOverlapsCollections","fullArea","_dragArea3","topLeft","_createCellCoords","bottomRight","dragRange","_createCellRange","getWithinRange"],"sources":["/home/ubuntu/community/vue-web/node_modules/handsontable/plugins/mergeCells/calculations/autofill.mjs"],"sourcesContent":["function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \"prototype\", { writable: false }); return Constructor; }\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\"; /**\n                                                         * Class responsible for all of the Autofill-related operations on merged cells.\n                                                         *\n                                                         * @private\n                                                         * @class AutofillCalculations\n                                                         */\nvar AutofillCalculations = /*#__PURE__*/function () {\n  function AutofillCalculations(plugin) {\n    _classCallCheck(this, AutofillCalculations);\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the MergedCellsCollection class instance.\n     *\n     * @type {MergedCellsCollection}\n     */\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\n     * Cache of the currently processed autofill data.\n     *\n     * @private\n     * @type {object}\n     */\n    this.currentFillData = null;\n  }\n\n  /**\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\n   *\n   * @param {Array} selectionArea The selection to correct.\n   */\n  _createClass(AutofillCalculations, [{\n    key: \"correctSelectionAreaSize\",\n    value: function correctSelectionAreaSize(selectionArea) {\n      if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n        var mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n        if (mergedCell) {\n          selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n          selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n        }\n      }\n    }\n\n    /**\n     * Get the direction of the autofill process.\n     *\n     * @param {Array} selectionArea The selection area.\n     * @param {Array} finalArea The final area (base + drag).\n     * @returns {string} `up`, `down`, `left` or `right`.\n     */\n  }, {\n    key: \"getDirection\",\n    value: function getDirection(selectionArea, finalArea) {\n      var direction = null;\n      if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'down';\n      } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n        direction = 'up';\n      } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n        direction = 'right';\n      } else {\n        direction = 'left';\n      }\n      return direction;\n    }\n\n    /**\n     * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\n     *\n     * @param {Array} baseArea The base selected area.\n     * @param {Array} dragArea The drag area.\n     * @param {string} dragDirection The autofill drag direction.\n     * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\n     * @returns {Array} The new drag area.\n     */\n  }, {\n    key: \"snapDragArea\",\n    value: function snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n      var newDragArea = dragArea.slice(0);\n      var fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n      var _baseArea = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea[0],\n        baseAreaStartColumn = _baseArea[1],\n        baseAreaEndRow = _baseArea[2],\n        baseAreaEndColumn = _baseArea[3];\n      var verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n      if (farthestCollection) {\n        if (dragDirection === 'down') {\n          var fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n          var newLimit = newDragArea[2] + fill;\n          if (newLimit >= this.plugin.hot.countRows()) {\n            newDragArea[2] -= partials;\n          } else {\n            newDragArea[2] += partials ? fill : 0;\n          }\n        } else if (dragDirection === 'right') {\n          var _fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n          var _newLimit = newDragArea[3] + _fill;\n          if (_newLimit >= this.plugin.hot.countCols()) {\n            newDragArea[3] -= partials;\n          } else {\n            newDragArea[3] += partials ? _fill : 0;\n          }\n        } else if (dragDirection === 'up') {\n          var _fill2 = baseAreaEndRow - partials - farthestCollection.row + 1;\n          var _newLimit2 = newDragArea[0] + _fill2;\n          if (_newLimit2 < 0) {\n            newDragArea[0] += partials;\n          } else {\n            newDragArea[0] -= partials ? _fill2 : 0;\n          }\n        } else if (dragDirection === 'left') {\n          var _fill3 = baseAreaEndColumn - partials - farthestCollection.col + 1;\n          var _newLimit3 = newDragArea[1] + _fill3;\n          if (_newLimit3 < 0) {\n            newDragArea[1] += partials;\n          } else {\n            newDragArea[1] -= partials ? _fill3 : 0;\n          }\n        }\n      }\n      this.updateCurrentFillCache({\n        baseArea: baseArea,\n        dragDirection: dragDirection,\n        foundMergedCells: foundMergedCells,\n        fillSize: fillSize,\n        dragArea: newDragArea,\n        cycleLength: fullCycle\n      });\n      return newDragArea;\n    }\n\n    /**\n     * Update the current fill cache with the provided object.\n     *\n     * @private\n     * @param {object} updateObject The current filled object cache.\n     */\n  }, {\n    key: \"updateCurrentFillCache\",\n    value: function updateCurrentFillCache(updateObject) {\n      if (!this.currentFillData) {\n        this.currentFillData = {};\n      }\n      extend(this.currentFillData, updateObject);\n    }\n\n    /**\n     * Get the \"length\" of the drag area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @returns {number|null} The \"length\" (height or width, depending on the direction) of the drag.\n     */\n  }, {\n    key: \"getAutofillSize\",\n    value: function getAutofillSize(baseArea, dragArea, direction) {\n      var _baseArea2 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea2[0],\n        baseAreaStartColumn = _baseArea2[1],\n        baseAreaEndRow = _baseArea2[2],\n        baseAreaEndColumn = _baseArea2[3];\n      var _dragArea = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea[0],\n        dragAreaStartColumn = _dragArea[1],\n        dragAreaEndRow = _dragArea[2],\n        dragAreaEndColumn = _dragArea[3];\n      switch (direction) {\n        case 'up':\n          return baseAreaStartRow - dragAreaStartRow;\n        case 'down':\n          return dragAreaEndRow - baseAreaEndRow;\n        case 'left':\n          return baseAreaStartColumn - dragAreaStartColumn;\n        case 'right':\n          return dragAreaEndColumn - baseAreaEndColumn;\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Trim the default drag area (containing the selection area) to the drag-only area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The base selection area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {Array|null} Array representing the drag area coordinates.\n     */\n  }, {\n    key: \"getDragArea\",\n    value: function getDragArea(baseArea, dragArea, direction) {\n      var _baseArea3 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea3[0],\n        baseAreaStartColumn = _baseArea3[1],\n        baseAreaEndRow = _baseArea3[2],\n        baseAreaEndColumn = _baseArea3[3];\n      var _dragArea2 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea2[0],\n        dragAreaStartColumn = _dragArea2[1],\n        dragAreaEndRow = _dragArea2[2],\n        dragAreaEndColumn = _dragArea2[3];\n      switch (direction) {\n        case 'up':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n        case 'down':\n          return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n        case 'left':\n          return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n        case 'right':\n          return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n        default:\n          return null;\n      }\n    }\n\n    /**\n     * Get the to-be-farthest merged cell in the newly filled area.\n     *\n     * @private\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} dragArea The drag area (containing the base area).\n     * @param {string} direction The drag direction.\n     * @param {Array} mergedCellArray Array of the merged cells found in the base area.\n     * @returns {MergedCellCoords|null}\n     */\n  }, {\n    key: \"getFarthestCollection\",\n    value: function getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n      var _baseArea4 = _slicedToArray(baseArea, 4),\n        baseAreaStartRow = _baseArea4[0],\n        baseAreaStartColumn = _baseArea4[1],\n        baseAreaEndRow = _baseArea4[2],\n        baseAreaEndColumn = _baseArea4[3];\n      var verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n      var baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n      var baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n      var fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n      var fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n      var fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n      var partials = fillSize - fulls;\n      var inclusionFunctionName = null;\n      var farthestCollection = null;\n      var endOfDragRecreationIndex = null;\n      switch (direction) {\n        case 'up':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'left':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseEnd - partials + 1;\n          break;\n        case 'down':\n          inclusionFunctionName = 'includesVertically';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        case 'right':\n          inclusionFunctionName = 'includesHorizontally';\n          endOfDragRecreationIndex = baseStart + partials - 1;\n          break;\n        default:\n      }\n      arrayEach(mergedCellArray, function (currentCollection) {\n        if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n          farthestCollection = currentCollection;\n        }\n      });\n      return farthestCollection;\n    }\n\n    /**\n     * Recreate the merged cells after the autofill process.\n     *\n     * @param {Array} changes Changes made.\n     */\n  }, {\n    key: \"recreateAfterDataPopulation\",\n    value: function recreateAfterDataPopulation(changes) {\n      if (!this.currentFillData) {\n        return;\n      }\n      var fillRange = this.getRangeFromChanges(changes);\n      var foundMergedCells = this.currentFillData.foundMergedCells;\n      var dragDirection = this.currentFillData.dragDirection;\n      var inBounds = function inBounds(current, offset) {\n        switch (dragDirection) {\n          case 'up':\n            return current.row - offset >= fillRange.from.row;\n          case 'down':\n            return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n          case 'left':\n            return current.col - offset >= fillRange.from.column;\n          case 'right':\n            return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n          default:\n            return null;\n        }\n      };\n      var fillOffset = 0;\n      var current = null;\n      var multiplier = 1;\n      do {\n        for (var j = 0; j < foundMergedCells.length; j += 1) {\n          current = foundMergedCells[j];\n          fillOffset = multiplier * this.currentFillData.cycleLength;\n          if (inBounds(current, fillOffset)) {\n            switch (dragDirection) {\n              case 'up':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row - fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'down':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row + fillOffset,\n                  rowspan: current.rowspan,\n                  col: current.col,\n                  colspan: current.colspan\n                });\n                break;\n              case 'left':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col - fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              case 'right':\n                this.plugin.mergedCellsCollection.add({\n                  row: current.row,\n                  rowspan: current.rowspan,\n                  col: current.col + fillOffset,\n                  colspan: current.colspan\n                });\n                break;\n              default:\n            }\n          }\n          if (j === foundMergedCells.length - 1) {\n            multiplier += 1;\n          }\n        }\n      } while (inBounds(current, fillOffset));\n      this.currentFillData = null;\n      this.plugin.hot.render();\n    }\n\n    /**\n     * Get the drag range from the changes made.\n     *\n     * @private\n     * @param {Array} changes The changes made.\n     * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.\n     */\n  }, {\n    key: \"getRangeFromChanges\",\n    value: function getRangeFromChanges(changes) {\n      var _this = this;\n      var rows = {\n        min: null,\n        max: null\n      };\n      var columns = {\n        min: null,\n        max: null\n      };\n      arrayEach(changes, function (change) {\n        var rowIndex = change[0];\n        var columnIndex = _this.plugin.hot.propToCol(change[1]);\n        if (rows.min === null || rowIndex < rows.min) {\n          rows.min = rowIndex;\n        }\n        if (rows.max === null || rowIndex > rows.max) {\n          rows.max = rowIndex;\n        }\n        if (columns.min === null || columnIndex < columns.min) {\n          columns.min = columnIndex;\n        }\n        if (columns.max === null || columnIndex > columns.max) {\n          columns.max = columnIndex;\n        }\n      });\n      return {\n        from: {\n          row: rows.min,\n          column: columns.min\n        },\n        to: {\n          row: rows.max,\n          column: columns.max\n        }\n      };\n    }\n\n    /**\n     * Check if the drag area contains any merged cells.\n     *\n     * @param {Array} baseArea The base selection area.\n     * @param {Array} fullArea The base area extended by the drag area.\n     * @param {string} direction Drag direction.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"dragAreaOverlapsCollections\",\n    value: function dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n      var dragArea = this.getDragArea(baseArea, fullArea, direction);\n      var _dragArea3 = _slicedToArray(dragArea, 4),\n        dragAreaStartRow = _dragArea3[0],\n        dragAreaStartColumn = _dragArea3[1],\n        dragAreaEndRow = _dragArea3[2],\n        dragAreaEndColumn = _dragArea3[3];\n      var topLeft = this.plugin.hot._createCellCoords(dragAreaStartRow, dragAreaStartColumn);\n      var bottomRight = this.plugin.hot._createCellCoords(dragAreaEndRow, dragAreaEndColumn);\n      var dragRange = this.plugin.hot._createCellRange(topLeft, topLeft, bottomRight);\n      return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n    }\n  }]);\n  return AutofillCalculations;\n}();\nexport default AutofillCalculations;"],"mappings":"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"},"metadata":{},"sourceType":"module"}