{"ast":null,"code":"/**\n * @typedef {object} DefaultHeaderSettings\n * @property {string} label The name/label of the column header.\n * @property {number} colspan Current calculated colspan value of the rendered column header element.\n * @property {number} origColspan Original colspan value, set once while parsing user-defined nested header settings.\n * @property {boolean} collapsible The flag determines whether the node is collapsible (can be collapsed/expanded).\n * @property {number[]} crossHiddenColumns The list of visual column indexes which indicates that the specified columns within\n *                                         the header settings are hidden.\n * @property {boolean} isCollapsed The flag determines whether the node is collapsed.\n * @property {boolean} isHidden The flag determines whether the column header at specified index is hidden. If true\n *                              the TH element will be rendered as hidden (display: none).\n * @property {boolean} isRoot The flag which determines whether the column header settings is actually not renderable. That kind\n *                            of objects are generated after colspaned header to fill an array to correct size.\n *                            For example for header with colspan = 8 the 7 blank objects are generated to fill the array settings\n *                            to length = 8.\n * @property {boolean} isPlaceholder The flag determines whether the column header at the specified index is non-renderable.\n */\n\n/**\n * Creates the header settings object with default values.\n *\n * @param {DefaultHeaderSettings} initialValues The initial values for the header settings object.\n * @returns {DefaultHeaderSettings}\n */\nexport function createDefaultHeaderSettings() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? '' : _ref$label,\n      _ref$colspan = _ref.colspan,\n      colspan = _ref$colspan === void 0 ? 1 : _ref$colspan,\n      _ref$origColspan = _ref.origColspan,\n      origColspan = _ref$origColspan === void 0 ? 1 : _ref$origColspan,\n      _ref$collapsible = _ref.collapsible,\n      collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,\n      _ref$crossHiddenColum = _ref.crossHiddenColumns,\n      crossHiddenColumns = _ref$crossHiddenColum === void 0 ? [] : _ref$crossHiddenColum,\n      _ref$isCollapsed = _ref.isCollapsed,\n      isCollapsed = _ref$isCollapsed === void 0 ? false : _ref$isCollapsed,\n      _ref$isHidden = _ref.isHidden,\n      isHidden = _ref$isHidden === void 0 ? false : _ref$isHidden,\n      _ref$isRoot = _ref.isRoot,\n      isRoot = _ref$isRoot === void 0 ? false : _ref$isRoot,\n      _ref$isPlaceholder = _ref.isPlaceholder,\n      isPlaceholder = _ref$isPlaceholder === void 0 ? false : _ref$isPlaceholder;\n\n  return {\n    label: label,\n    colspan: colspan,\n    origColspan: origColspan,\n    collapsible: collapsible,\n    isCollapsed: isCollapsed,\n    crossHiddenColumns: crossHiddenColumns,\n    isHidden: isHidden,\n    isRoot: isRoot,\n    isPlaceholder: isPlaceholder\n  };\n}\n/**\n * Creates the placeholder header settings object. Those settings tell the header renderers\n * that this TH element should not be rendered (the node will be overlapped by the previously\n * created node with colspan bigger than 1).\n *\n * @returns {object}\n */\n\nexport function createPlaceholderHeaderSettings() {\n  return {\n    label: '',\n    isPlaceholder: true\n  };\n}","map":{"version":3,"names":["createDefaultHeaderSettings","_ref","arguments","length","undefined","_ref$label","label","_ref$colspan","colspan","_ref$origColspan","origColspan","_ref$collapsible","collapsible","_ref$crossHiddenColum","crossHiddenColumns","_ref$isCollapsed","isCollapsed","_ref$isHidden","isHidden","_ref$isRoot","isRoot","_ref$isPlaceholder","isPlaceholder","createPlaceholderHeaderSettings"],"sources":["/home/ubuntu/community/vue-web/node_modules/handsontable/plugins/nestedHeaders/stateManager/utils.mjs"],"sourcesContent":["/**\n * @typedef {object} DefaultHeaderSettings\n * @property {string} label The name/label of the column header.\n * @property {number} colspan Current calculated colspan value of the rendered column header element.\n * @property {number} origColspan Original colspan value, set once while parsing user-defined nested header settings.\n * @property {boolean} collapsible The flag determines whether the node is collapsible (can be collapsed/expanded).\n * @property {number[]} crossHiddenColumns The list of visual column indexes which indicates that the specified columns within\n *                                         the header settings are hidden.\n * @property {boolean} isCollapsed The flag determines whether the node is collapsed.\n * @property {boolean} isHidden The flag determines whether the column header at specified index is hidden. If true\n *                              the TH element will be rendered as hidden (display: none).\n * @property {boolean} isRoot The flag which determines whether the column header settings is actually not renderable. That kind\n *                            of objects are generated after colspaned header to fill an array to correct size.\n *                            For example for header with colspan = 8 the 7 blank objects are generated to fill the array settings\n *                            to length = 8.\n * @property {boolean} isPlaceholder The flag determines whether the column header at the specified index is non-renderable.\n */\n\n/**\n * Creates the header settings object with default values.\n *\n * @param {DefaultHeaderSettings} initialValues The initial values for the header settings object.\n * @returns {DefaultHeaderSettings}\n */\nexport function createDefaultHeaderSettings() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    _ref$label = _ref.label,\n    label = _ref$label === void 0 ? '' : _ref$label,\n    _ref$colspan = _ref.colspan,\n    colspan = _ref$colspan === void 0 ? 1 : _ref$colspan,\n    _ref$origColspan = _ref.origColspan,\n    origColspan = _ref$origColspan === void 0 ? 1 : _ref$origColspan,\n    _ref$collapsible = _ref.collapsible,\n    collapsible = _ref$collapsible === void 0 ? false : _ref$collapsible,\n    _ref$crossHiddenColum = _ref.crossHiddenColumns,\n    crossHiddenColumns = _ref$crossHiddenColum === void 0 ? [] : _ref$crossHiddenColum,\n    _ref$isCollapsed = _ref.isCollapsed,\n    isCollapsed = _ref$isCollapsed === void 0 ? false : _ref$isCollapsed,\n    _ref$isHidden = _ref.isHidden,\n    isHidden = _ref$isHidden === void 0 ? false : _ref$isHidden,\n    _ref$isRoot = _ref.isRoot,\n    isRoot = _ref$isRoot === void 0 ? false : _ref$isRoot,\n    _ref$isPlaceholder = _ref.isPlaceholder,\n    isPlaceholder = _ref$isPlaceholder === void 0 ? false : _ref$isPlaceholder;\n  return {\n    label: label,\n    colspan: colspan,\n    origColspan: origColspan,\n    collapsible: collapsible,\n    isCollapsed: isCollapsed,\n    crossHiddenColumns: crossHiddenColumns,\n    isHidden: isHidden,\n    isRoot: isRoot,\n    isPlaceholder: isPlaceholder\n  };\n}\n\n/**\n * Creates the placeholder header settings object. Those settings tell the header renderers\n * that this TH element should not be rendered (the node will be overlapped by the previously\n * created node with colspan bigger than 1).\n *\n * @returns {object}\n */\nexport function createPlaceholderHeaderSettings() {\n  return {\n    label: '',\n    isPlaceholder: true\n  };\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,2BAAT,GAAuC;EAC5C,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;EAAA,IACEG,UAAU,GAAGJ,IAAI,CAACK,KADpB;EAAA,IAEEA,KAAK,GAAGD,UAAU,KAAK,KAAK,CAApB,GAAwB,EAAxB,GAA6BA,UAFvC;EAAA,IAGEE,YAAY,GAAGN,IAAI,CAACO,OAHtB;EAAA,IAIEA,OAAO,GAAGD,YAAY,KAAK,KAAK,CAAtB,GAA0B,CAA1B,GAA8BA,YAJ1C;EAAA,IAKEE,gBAAgB,GAAGR,IAAI,CAACS,WAL1B;EAAA,IAMEA,WAAW,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,CAA9B,GAAkCA,gBANlD;EAAA,IAOEE,gBAAgB,GAAGV,IAAI,CAACW,WAP1B;EAAA,IAQEA,WAAW,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,KAA9B,GAAsCA,gBARtD;EAAA,IASEE,qBAAqB,GAAGZ,IAAI,CAACa,kBAT/B;EAAA,IAUEA,kBAAkB,GAAGD,qBAAqB,KAAK,KAAK,CAA/B,GAAmC,EAAnC,GAAwCA,qBAV/D;EAAA,IAWEE,gBAAgB,GAAGd,IAAI,CAACe,WAX1B;EAAA,IAYEA,WAAW,GAAGD,gBAAgB,KAAK,KAAK,CAA1B,GAA8B,KAA9B,GAAsCA,gBAZtD;EAAA,IAaEE,aAAa,GAAGhB,IAAI,CAACiB,QAbvB;EAAA,IAcEA,QAAQ,GAAGD,aAAa,KAAK,KAAK,CAAvB,GAA2B,KAA3B,GAAmCA,aAdhD;EAAA,IAeEE,WAAW,GAAGlB,IAAI,CAACmB,MAfrB;EAAA,IAgBEA,MAAM,GAAGD,WAAW,KAAK,KAAK,CAArB,GAAyB,KAAzB,GAAiCA,WAhB5C;EAAA,IAiBEE,kBAAkB,GAAGpB,IAAI,CAACqB,aAjB5B;EAAA,IAkBEA,aAAa,GAAGD,kBAAkB,KAAK,KAAK,CAA5B,GAAgC,KAAhC,GAAwCA,kBAlB1D;;EAmBA,OAAO;IACLf,KAAK,EAAEA,KADF;IAELE,OAAO,EAAEA,OAFJ;IAGLE,WAAW,EAAEA,WAHR;IAILE,WAAW,EAAEA,WAJR;IAKLI,WAAW,EAAEA,WALR;IAMLF,kBAAkB,EAAEA,kBANf;IAOLI,QAAQ,EAAEA,QAPL;IAQLE,MAAM,EAAEA,MARH;IASLE,aAAa,EAAEA;EATV,CAAP;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,+BAAT,GAA2C;EAChD,OAAO;IACLjB,KAAK,EAAE,EADF;IAELgB,aAAa,EAAE;EAFV,CAAP;AAID"},"metadata":{},"sourceType":"module"}