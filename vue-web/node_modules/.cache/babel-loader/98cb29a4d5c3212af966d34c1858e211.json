{"ast":null,"code":"// import { message } from 'ant-design-vue';\n// import emitter from '@/utils/bus';\nimport { defineComponent, reactive, ref, watch, toRaw } from 'vue';\nexport default defineComponent({\n  setup() {\n    const formState = reactive({\n      encryption: [],\n      users: []\n    });\n    const formRef = ref();\n    const modalFormRef = ref();\n    const visible = ref(false);\n    const modalFormState = ref({});\n    watch(visible, () => {\n      modalFormState.value = {};\n    }, {\n      flush: 'post'\n    });\n\n    const onOk = () => {\n      modalFormRef.value.validateFields().then(() => {\n        formState.users.push({ ...modalFormState.value,\n          key: Date.now()\n        });\n        visible.value = false;\n      });\n    };\n\n    const onFinish = () => {\n      console.log('Finish:', toRaw(formState));\n    };\n\n    let validateEncryption = async (_rule, value) => {\n      if (value === '') {\n        return Promise.reject('请输入正确格式投票主题');\n      } else if (value.length != value.split(\" \").join(\"\").length) {\n        return Promise.reject('输入包含空格');\n      } else {\n        return Promise.resolve();\n      }\n    };\n\n    const rules = {\n      encryption: [{\n        required: true,\n        validator: validateEncryption,\n        trigger: 'change'\n      }]\n    };\n    return {\n      formState,\n      rules,\n      validateEncryption,\n      formRef,\n      modalFormRef,\n      visible,\n      modalFormState,\n      onOk,\n      onFinish\n    };\n  },\n\n  methods: {\n    getpara() {\n      var para = setup(256);\n      console.log(para);\n      this.formState.encryption = Object.values(para);\n      console.log(Object.values(para));\n    },\n\n    prevStep() {\n      this.$emit('prevStep');\n    },\n\n    nextStep() {\n      if (this.formState.encryption !== '' && this.formState.users !== '') {\n        this.$emit('nextStep');\n      }\n    }\n\n  }\n});","map":{"version":3,"mappings":"AAiGA;AACA;AACA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,EAAgDC,KAAhD,QAA6D,KAA7D;AACA,eAAeJ,eAAe,CAAC;EAC7BK,KAAK,GAAG;IACN,MAAMC,SAAQ,GAAIL,QAAQ,CAAC;MACzBM,UAAU,EAAE,EADa;MAEzBC,KAAK,EAAE;IAFkB,CAAD,CAA1B;IAKA,MAAMC,OAAM,GAAIP,GAAG,EAAnB;IACA,MAAMQ,YAAW,GAAIR,GAAG,EAAxB;IACA,MAAMS,OAAM,GAAIT,GAAG,CAAC,KAAD,CAAnB;IACA,MAAMU,cAAa,GAAIV,GAAG,CAAC,EAAD,CAA1B;IACAC,KAAK,CAACQ,OAAD,EAAU,MAAM;MACnBC,cAAc,CAACC,KAAf,GAAuB,EAAvB;IACD,CAFI,EAEF;MACDC,KAAK,EAAE;IADN,CAFE,CAAL;;IAMA,MAAMC,IAAG,GAAI,MAAM;MACjBL,YAAY,CAACG,KAAb,CAAmBG,cAAnB,GAAoCC,IAApC,CAAyC,MAAM;QAC7CX,SAAS,CAACE,KAAV,CAAgBU,IAAhB,CAAqB,EACnB,GAAGN,cAAc,CAACC,KADC;UAEnBM,GAAG,EAAEC,IAAI,CAACC,GAAL;QAFc,CAArB;QAIAV,OAAO,CAACE,KAAR,GAAgB,KAAhB;MACD,CAND;IAOD,CARD;;IAUA,MAAMS,QAAO,GAAI,MAAM;MACrBC,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBpB,KAAK,CAACE,SAAD,CAA5B;IACD,CAFD;;IAIA,IAAImB,kBAAiB,GAAI,OAAOC,KAAP,EAAcb,KAAd,KAAwB;MAC/C,IAAIA,KAAI,KAAM,EAAd,EAAkB;QAChB,OAAOc,OAAO,CAACC,MAAR,CAAe,aAAf,CAAP;MACF,CAFA,MAGK,IAAIf,KAAK,CAACgB,MAAN,IAAgBhB,KAAK,CAACiB,KAAN,CAAY,GAAZ,EAAiBC,IAAjB,CAAsB,EAAtB,EAA0BF,MAA9C,EAAsD;QACzD,OAAOF,OAAO,CAACC,MAAR,CAAe,QAAf,CAAP;MACF,CAFK,MAGA;QACH,OAAOD,OAAO,CAACK,OAAR,EAAP;MACF;IACD,CAVD;;IAYA,MAAMC,KAAI,GAAI;MACZ1B,UAAU,EAAE,CACV;QACE2B,QAAQ,EAAE,IADZ;QAEEC,SAAS,EAAEV,kBAFb;QAGEW,OAAO,EAAE;MAHX,CADU;IADA,CAAd;IAUA,OAAO;MACL9B,SADK;MAEL2B,KAFK;MAGLR,kBAHK;MAILhB,OAJK;MAKLC,YALK;MAMLC,OANK;MAOLC,cAPK;MAQLG,IARK;MASLO;IATK,CAAP;EAWD,CAhE4B;;EAkE7Be,OAAO,EAAE;IACPC,OAAO,GAAG;MACR,IAAIC,IAAG,GAAIlC,KAAK,CAAC,GAAD,CAAhB;MACAkB,OAAO,CAACC,GAAR,CAAYe,IAAZ;MACA,KAAKjC,SAAL,CAAeC,UAAf,GAA4BiC,MAAM,CAACC,MAAP,CAAcF,IAAd,CAA5B;MACAhB,OAAO,CAACC,GAAR,CAAYgB,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAZ;IACD,CANM;;IAOPG,QAAQ,GAAG;MACT,KAAKC,KAAL,CAAW,UAAX;IACD,CATM;;IAUPC,QAAQ,GAAG;MACT,IAAG,KAAKtC,SAAL,CAAeC,UAAf,KAA6B,EAA7B,IAAiC,KAAKD,SAAL,CAAeE,KAAf,KAAyB,EAA7D,EAAgE;QAChE,KAAKmC,KAAL,CAAW,UAAX;MACA;IACF;;EAdO;AAlEoB,CAAD,CAA9B","names":["defineComponent","reactive","ref","watch","toRaw","setup","formState","encryption","users","formRef","modalFormRef","visible","modalFormState","value","flush","onOk","validateFields","then","push","key","Date","now","onFinish","console","log","validateEncryption","_rule","Promise","reject","length","split","join","resolve","rules","required","validator","trigger","methods","getpara","para","Object","values","prevStep","$emit","nextStep"],"sourceRoot":"","sources":["/home/ubuntu/voting/vue-web/src/views/InitVote/we/initWe/StepTwo.vue"],"sourcesContent":["<template>\r\n  <div style=\"margin: 60px auto 0;\">\r\n    <a-form :model=\"formState\" name=\"custom-validation\" :rules=\"rules\" :labelCol=\"{lg: {span: 7}, sm: {span: 7}}\"\r\n      :wrapperCol=\"{lg: {span: 10}, sm: {span: 20}}\" style=\"margin: 40px auto 0;\" autocomplete=\"off\">\r\n\r\n      <!-- <a-form-item has-feedback label=\"加密参数\" name=\"encryption\">\r\n      <a-input  size=\"large\" v-model:value=\"formState.encryption\" placeholder=\"输入加密参数\" type=\"text\" autocomplete=\"off\" />\r\n      <a-button type=\"primary\" html-type=\"submit\" style=\"margin-left: 8px\" @click=\"nextStep\">下一步</a-button>\r\n      <a-input v-model:value=\"value\" placeholder=\"Basic usage\" disabled=\"true\"/>\r\n      <a-list item-layout=\"horizontal\" :data-source=\"data\">\r\n    <template #renderItem=\"{ item }\">\r\n      <a-list-item>\r\n        <a-list-item-meta\r\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n        >\r\n          <template #title>\r\n            <a href=\"https://www.antdv.com/\">{{ item.title }}</a>\r\n          </template>\r\n         \r\n        </a-list-item-meta>\r\n      </a-list-item>\r\n    </template>\r\n  </a-list>\r\n    </a-form-item> -->\r\n\r\n      <a-form-item label=\"加密参数\"\r\n        :rules=\"[{ required: true }]\">\r\n        <a-button size=\"large\" type=\"dashed\" style=\"width: 80%\" @click=\"getpara\">\r\n          <PlusOutlined />\r\n          获取加密参数\r\n        </a-button>\r\n      </a-form-item>\r\n\r\n      <a-form-item label=\"加密参数\" v-if=\"formState.encryption.length\">\r\n        <a-descriptions bordered :column=\"{ xxl: 1, xl: 1, lg: 1, md: 1, sm: 1, xs: 1 }\">\r\n          <a-descriptions-item label=\"P\">{{formState.encryption[0]}}</a-descriptions-item>\r\n          <a-descriptions-item label=\"G\">{{formState.encryption[1]}}</a-descriptions-item>\r\n          <a-descriptions-item label=\"G\">{{formState.encryption[2]}}</a-descriptions-item>\r\n        </a-descriptions>\r\n      </a-form-item>\r\n\r\n\r\n      <a-form-item label=\"添加投票者\" :rules=\"[{ required: true }]\">\r\n        <template v-if=\"formState.users.length\">\r\n          <ul>\r\n            <template v-for=\"user in formState.users\" :key=\"user.key\">\r\n              <li class=\"user\">\r\n                <a-avatar>\r\n                  <template #icon>\r\n                    <UserOutlined />\r\n                  </template>\r\n                </a-avatar>\r\n                {{ user.id }} - {{ user.weight }}\r\n              </li>\r\n            </template>\r\n          </ul>\r\n        </template>\r\n        <template v-else>\r\n          <a-typography-text class=\"ant-form-text\" type=\"secondary\">\r\n            (\r\n            <SmileOutlined />\r\n            请添加合法投票者. )\r\n          </a-typography-text>\r\n        </template>\r\n        <a-button html-type=\"button\" style=\"margin: 0 8px\" @click=\"visible = true\">添加</a-button>\r\n      </a-form-item>\r\n\r\n\r\n\r\n      <a-modal v-model:visible=\"visible\" title=\"投票者信息\" @ok=\"onOk\">\r\n        <a-form ref=\"modalFormRef\" :model=\"modalFormState\" layout=\"vertical\" name=\"userForm\">\r\n          <a-form-item name=\"id\" label=\"投票者ID\" :rules=\"[{ required: true }]\">\r\n            <a-input v-model:value=\"modalFormState.id\" />\r\n          </a-form-item>\r\n          <a-form-item name=\"weight\" label=\"投票者权重\" :rules=\"[{ required: true }]\">\r\n            <a-input-number v-model:value=\"modalFormState.weight\" :min=\"1\" :max=\"10\" />\r\n          </a-form-item>\r\n        </a-form>\r\n      </a-modal>\r\n\r\n\r\n      <a-form-item :wrapperCol=\"{ span: 24 }\" style=\"text-align: center\">\r\n        <a-button type=\"primary\" @click=\"prevStep\">上一步</a-button>\r\n        <a-button type=\"primary\" html-type=\"submit\" style=\"margin-left: 8px\" @click=\"nextStep\">下一步</a-button>\r\n      </a-form-item>\r\n    </a-form>\r\n\r\n    <a-divider />\r\n    <div class=\"step-form-style-desc\">\r\n      <h3>说明</h3>\r\n      <h4>发起匿名权重投票事项</h4>\r\n      <p>如果需要，这里可以放一些关于产品的常见问题说明。如果需要，这里可以放一些关于产品的常见问题说明。如果需要，这里可以放一些关于产品的常见问题说明。</p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// import { message } from 'ant-design-vue';\r\n// import emitter from '@/utils/bus';\r\nimport { defineComponent, reactive, ref, watch, toRaw } from 'vue';\r\nexport default defineComponent({\r\n  setup() {\r\n    const formState = reactive({\r\n      encryption: [],\r\n      users: [],\r\n    });\r\n\r\n    const formRef = ref();\r\n    const modalFormRef = ref();\r\n    const visible = ref(false);\r\n    const modalFormState = ref({});\r\n    watch(visible, () => {\r\n      modalFormState.value = {};\r\n    }, {\r\n      flush: 'post',\r\n    });\r\n\r\n    const onOk = () => {\r\n      modalFormRef.value.validateFields().then(() => {\r\n        formState.users.push({\r\n          ...modalFormState.value,\r\n          key: Date.now(),\r\n        });\r\n        visible.value = false;\r\n      });\r\n    };\r\n\r\n    const onFinish = () => {\r\n      console.log('Finish:', toRaw(formState));\r\n    };\r\n\r\n    let validateEncryption = async (_rule, value) => {\r\n      if (value === '') {\r\n        return Promise.reject('请输入正确格式投票主题');\r\n      }\r\n      else if (value.length != value.split(\" \").join(\"\").length) {\r\n        return Promise.reject('输入包含空格');\r\n      }\r\n      else {\r\n        return Promise.resolve();\r\n      }\r\n    };\r\n\r\n    const rules = {\r\n      encryption: [\r\n        {\r\n          required: true,\r\n          validator: validateEncryption,\r\n          trigger: 'change',\r\n        },\r\n      ],\r\n    };\r\n\r\n    return {\r\n      formState,\r\n      rules,\r\n      validateEncryption,\r\n      formRef,\r\n      modalFormRef,\r\n      visible,\r\n      modalFormState,\r\n      onOk,\r\n      onFinish\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    getpara() {\r\n      var para = setup(256)\r\n      console.log(para)\r\n      this.formState.encryption = Object.values(para)\r\n      console.log(Object.values(para))\r\n    },\r\n    prevStep() {\r\n      this.$emit('prevStep')\r\n    },\r\n    nextStep() {\r\n      if(this.formState.encryption !==''&&this.formState.users !== ''){\r\n      this.$emit('nextStep')\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n});\r\n</script>\r\n<style lang=\"less\" scoped>\r\n.step-form-style-desc {\r\n  padding: 0 56px;\r\n  color: rgba(0, 0, 0, .45);\r\n\r\n  h3 {\r\n    margin: 0 0 12px;\r\n    color: rgba(0, 0, 0, .45);\r\n    font-size: 16px;\r\n    line-height: 32px;\r\n  }\r\n\r\n  h4 {\r\n    margin: 0 0 4px;\r\n    color: rgba(0, 0, 0, .45);\r\n    font-size: 14px;\r\n    line-height: 22px;\r\n  }\r\n\r\n  p {\r\n    margin-top: 0;\r\n    margin-bottom: 12px;\r\n    line-height: 22px;\r\n  }\r\n}\r\n\r\n.dynamic-delete-button {\r\n  cursor: pointer;\r\n  position: relative;\r\n  top: 4px;\r\n  font-size: 24px;\r\n  color: #999;\r\n  transition: all 0.3s;\r\n}\r\n\r\n.dynamic-delete-button:hover {\r\n  color: #777;\r\n}\r\n\r\n.dynamic-delete-button[disabled] {\r\n  cursor: not-allowed;\r\n  opacity: 0.5;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}